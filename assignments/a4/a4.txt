QUESTION 1:

    let
        x = 3
        f = proc(x) set x = 4
    in {
        .f(x);
        x
    }

    SET: 3
    REF: 4
    NAME: 4
    NEED: 4

QUESTION 2:

    let
        x = 3
        f = proc(x) { x; x; x }
    in {
        .f(set x = sub1(x));
        x
    }

    SET: 2
    REF: 2
    NAME: 0
    NEED: 2

QUESTION 5:

    let
        p = proc(f : [int => int]): [int => int] proc(x : int) : int .f(.f(x))
        q = proc(t : int) : int *(t, t)
    in
        .p(q)

    [int => int]

QUESTION 6:

    if add1(0) then +(4, 5) else { let p = proc() : int 9 in p }

    There is a type error. First our IfExp needs a bool whereas add1(0) is an int. 
    Though even if we switch "add1(0)" we still run into the issue of a type mismatch in the else section.
    "type mismatch: [=>int] != int" an empty type being cast as an int is not equivalent to an int.